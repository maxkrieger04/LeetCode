/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
     //Determine if either list is NULL to prevent memory overloading
     if (list1 == NULL) return list2;
     if (list2 == NULL) return list1;

     //Determines head   
     ListNode* head;
     if (list1->val > list2->val) 
     {
         head = list2;
         list2 = list2->next;
     }
     else 
     {
         head = list1; 
         list1 = list1->next;
     }
     ListNode* headCopy = head; //Copy to return, since head will point to NULL

     //Determines next value
     while (list1 != NULL && list2 != NULL)
     {
         if (list1->val < list2->val)
         {
             head->next = list1;
             list1 = list1->next;
         }
         else
         {
             head->next = list2;
             list2 = list2->next;
         }
         head = head->next;
     }

     //One of the linked lists points to Null, the rest of the merged linked list points
     //to the other linked list
     if (list1 != NULL) head->next = list1;
     else head->next = list2;

     return headCopy;
    }
};
